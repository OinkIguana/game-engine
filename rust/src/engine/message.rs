//! Defines various message types that may be emitted by/dispatched to the game engine. These
//! messages are the only way in which the engine and [`Model`](trait.Model.html) can communicate.
//!
//! In addition to these built in messages, the engine provides a service by which custom
//! user-implemented messages can be dispatched and relayed back to the [`Model`](trait.Model.html).

use sdl2;
use super::audio::{SoundID, MusicID, SoundChannel};

/// Used to dispatch `Messages` to the engine, which will then pass them back to the
/// [`Model`](trait.Model.html) or process them itself.
pub type Dispatch<'a, T> = &'a Fn(Message<T>);

/// A `GameMessage` is one that is generated by the engine, which will be passed to the Model at
/// the earliest convenience.
#[derive(Clone,Copy)]
pub enum GameMessage {
    /// A key on the keyboard has been pressed. Note that this will fire repeat key-presses after
    /// a delay when a key is held down.
    KeyDown(sdl2::keyboard::Scancode),
    /// A key on the keyboard has been released.
    KeyUp(sdl2::keyboard::Scancode),
}

/// An `AudioMessage` is dispatched by the [`Model`](trait.Model.html) to play sounds on the audio
/// thread.
#[derive(Clone,Copy)]
pub enum AudioMessage {
    /// Dispatch this message to play a sound on the provided [`SoundChannel`](enum.SoundChannel.html)
    Play(SoundID, SoundChannel),
    /// Dispatch this message to stop a sound on the provided [`SoundChannel`](enum.SoundChannel.html)
    Stop(SoundID, SoundChannel),
    /// Dispatch this message to set the currently playing music.
    PlayMusic(MusicID),
    /// Dispatch this message to stop the currently playing music.
    StopMusic,
}

/// A `Message` wraps the many types of messages so all of them can be dispatched through a single
/// `Dispatch` function. The wrapped types are only used by the dispatching thread to choose where
/// to send the actual message inside.
///
/// The provided `Msg` type may be anything, and will be sent when a `Relay` is sent through the
/// [`Dispatch`](type.Dispatch.html)
#[derive(Clone,Copy)]
pub enum Message<Msg: Copy + Clone> {
    /// A wrapper for GameMessages
    Game(GameMessage),
    /// A wrapper for generic user specified messages
    Relay(Msg),
    /// A wrapper for AudioMessages
    Audio(AudioMessage),
    /// A wrapper to send values to the debug thread. This may not be any better than just using
    /// `eprintln!()`, however
    Debug(&'static str),
}
